class CByteBuffer
{
    CByteBuffer( uint16_t size );
    ~CByteBuffer();
    
    char * getWritingPos();
    uint16_t getNumberToRead()
    inline bool dataAvailable(){ return ( writingpos > readinpos );}
    
    
    private:
        char * data;
        uint16_t readingpos;
        uint16_t writingpos
        
        bool wir; //write in front of read ( if true the write buffer has overdriven the buffersize and so starts to write at the beginngin
                  //now shouldn overdrive the read buffer if its false the is no problem with do so
 
    



};
